version: '3.8'

services:
  oap:
    image: apache/skywalking-oap-server:10.0.1
    container_name: oap
    healthcheck:
      test: [ "CMD-SHELL", "curl http://localhost:12800/internal/l7check" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      SW_HEALTH_CHECKER: default
      SW_TELEMETRY: prometheus
      JAVA_OPTS: "-Xms2048m -Xmx2048m"
      SW_STORAGE: elasticsearch
      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200
    ports:
      - "12800:12800" # HTTP REST port
      - "11800:11800" # gRPC port
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - skywalking-network

  ui:
    image: apache/skywalking-ui:10.0.1
    container_name: skywalking-ui
    environment:
      SW_OAP_ADDRESS: http://oap:12800
      SW_ZIPKIN_ADDRESS: http://oap:9412
    ports:
      - "8080:8080" # Web UI port
    networks:
      - skywalking-network

  elasticsearch:
    image: elasticsearch:7.17.9
    container_name: elasticsearch
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    user: root
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - skywalking-network
    volumes:
      - /data/elasticsearch-data:/usr/share/elasticsearch/data

  otel_collector:
    networks:
      - skywalking-network
    image: otel/opentelemetry-collector-contrib:0.114.0
    volumes:
      - ${OTEL_CONFIG_SRC:-./otel-collector-config-connector.yml}:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8888:8888" # Debugging endpoint
      - "8889:8889" # Prometheus metrics endpoint

  nestjs:
    container_name: nestjs
    build:
      context: ./nestjs
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./nestjs:/app
      - /app/node_modules
    networks:
      - skywalking-network
    depends_on:
      oap:
        condition: service_healthy

  nodejs:
    container_name: nodejs
    build:
      context: ./nodejs-agent
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./nodejs-agent:/app
      - /app/node_modules
    networks:
      - skywalking-network
    depends_on:
      oap:
        condition: service_healthy

  golang:
    container_name: golang
    build:
      context: ./go-agent
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - skywalking-network
    depends_on:
      oap:
        condition: service_healthy

  dotnet:
    container_name: dotnet
    build:
      context: ./sampleapp
      dockerfile: Dockerfile
    ports:
      - "5072:8080"
    networks:
      - skywalking-network
    depends_on:
      oap:
        condition: service_healthy

networks:
  skywalking-network:
